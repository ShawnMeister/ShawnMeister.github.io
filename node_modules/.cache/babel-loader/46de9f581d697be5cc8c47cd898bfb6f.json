{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Shawn\\\\Documents\\\\GitHub\\\\Shawn-Portfolio\\\\portfolio\\\\react-3dAxe-landing\\\\src\\\\Components\\\\WhiteSpheres\\\\Sphere.js\";\nimport React, { useMemo, useRef, useState, useEffect, useCallback } from \"react\";\nimport { random } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\nexport default (() => {\n  const mesh = useRef();\n  const time = useRef(0);\n  const [isActive, setIsActive] = useState(false);\n  const isActiveRef = useRef(isActive); // position\n\n  const position = useMemo(() => {\n    return [random(-5, 5, true), random(-10, 10, true), random(-5, 5, true)];\n  }, []); // random time mod factor\n\n  const timeMod = useMemo(() => random(0.1, 4, true), []); // color\n\n  let color = 0xf8f8ff; //useEffect of the activeState\n\n  useEffect(() => {\n    isActiveRef.current = isActive;\n  }, [isActive]); // raf loop\n\n  useFrame(() => {\n    mesh.current.rotation.y += 0.01 * timeMod;\n\n    if (isActiveRef.current) {\n      time.current += 0.03;\n      mesh.current.position.y = position[1] + Math.sin(time.current) * 0.4;\n    }\n  });\n  const onClick = useCallback(e => {\n    e.stopPropagation();\n    setIsActive(v => !v);\n  }, [setIsActive]);\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: mesh,\n    position: position,\n    onClick: e => onClick(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.0047, 5, 0.29],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: color,\n    roughness: 0.6,\n    metalness: 0.1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n});","map":{"version":3,"sources":["D:/Users/Shawn/Documents/GitHub/Shawn-Portfolio/portfolio/react-3dAxe-landing/src/Components/WhiteSpheres/Sphere.js"],"names":["React","useMemo","useRef","useState","useEffect","useCallback","random","useFrame","mesh","time","isActive","setIsActive","isActiveRef","position","timeMod","color","current","rotation","y","Math","sin","onClick","e","stopPropagation","v"],"mappings":";AAAA,OAAOA,KAAP,IACEC,OADF,EAEEC,MAFF,EAGEC,QAHF,EAIEC,SAJF,EAKEC,WALF,QAMO,OANP;AAOA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,gBAAe,MAAM;AACnB,QAAMC,IAAI,GAAGN,MAAM,EAAnB;AACA,QAAMO,IAAI,GAAGP,MAAM,CAAC,CAAD,CAAnB;AAGA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMS,WAAW,GAAGV,MAAM,CAACQ,QAAD,CAA1B,CAPmB,CASnB;;AACA,QAAMG,QAAQ,GAAGZ,OAAO,CAAC,MAAM;AAC7B,WAAO,CAACK,MAAM,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,IAAR,CAAP,EAAsBA,MAAM,CAAC,CAAC,EAAF,EAAM,EAAN,EAAU,IAAV,CAA5B,EAA6CA,MAAM,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,IAAR,CAAnD,CAAP;AACD,GAFuB,EAErB,EAFqB,CAAxB,CAVmB,CAcnB;;AACA,QAAMQ,OAAO,GAAGb,OAAO,CAAC,MAAMK,MAAM,CAAC,GAAD,EAAM,CAAN,EAAS,IAAT,CAAb,EAA6B,EAA7B,CAAvB,CAfmB,CAiBnB;;AACA,MAAIS,KAAK,GAAG,QAAZ,CAlBmB,CAqBnB;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAACI,OAAZ,GAAsBN,QAAtB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAtBmB,CA0BnB;;AACAH,EAAAA,QAAQ,CAAC,MAAM;AACbC,IAAAA,IAAI,CAACQ,OAAL,CAAaC,QAAb,CAAsBC,CAAtB,IAA2B,OAAOJ,OAAlC;;AACA,QAAIF,WAAW,CAACI,OAAhB,EAAyB;AACvBP,MAAAA,IAAI,CAACO,OAAL,IAAgB,IAAhB;AACAR,MAAAA,IAAI,CAACQ,OAAL,CAAaH,QAAb,CAAsBK,CAAtB,GAA0BL,QAAQ,CAAC,CAAD,CAAR,GAAcM,IAAI,CAACC,GAAL,CAASX,IAAI,CAACO,OAAd,IAAyB,GAAjE;AACD;AACF,GANO,CAAR;AAQA,QAAMK,OAAO,GAAGhB,WAAW,CACzBiB,CAAC,IAAI;AACHA,IAAAA,CAAC,CAACC,eAAF;AACAZ,IAAAA,WAAW,CAACa,CAAC,IAAI,CAACA,CAAP,CAAX;AACD,GAJwB,EAKzB,CAACb,WAAD,CALyB,CAA3B;AAQA,sBACE;AACE,IAAA,GAAG,EAAEH,IADP;AAEE,IAAA,QAAQ,EAAEK,QAFZ;AAGE,IAAA,OAAO,EAAES,CAAC,IAAID,OAAO,CAACC,CAAD,CAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE;AAAsB,IAAA,MAAM,EAAC,UAA7B;AAAwC,IAAA,IAAI,EAAE,CAAC,MAAD,EAAS,CAAT,EAAY,IAAZ,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAWE;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,KAAK,EAAEP,KAFT;AAGE,IAAA,SAAS,EAAE,GAHb;AAIE,IAAA,SAAS,EAAE,GAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AAoBD,CA/DD","sourcesContent":["import React, {\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  useCallback\r\n} from \"react\";\r\nimport { random } from \"lodash\";\r\nimport { useFrame } from \"react-three-fiber\";\r\n\r\nexport default () => {\r\n  const mesh = useRef();\r\n  const time = useRef(0);\r\n\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  const isActiveRef = useRef(isActive);\r\n\r\n  // position\r\n  const position = useMemo(() => {\r\n    return [random(-5, 5, true), random(-10, 10, true), random(-5, 5, true)];\r\n  }, []);\r\n\r\n  // random time mod factor\r\n  const timeMod = useMemo(() => random(0.1, 4, true), []);\r\n\r\n  // color\r\n  let color = 0xf8f8ff;\r\n\r\n\r\n  //useEffect of the activeState\r\n  useEffect(() => {\r\n    isActiveRef.current = isActive;\r\n  }, [isActive]);\r\n\r\n  // raf loop\r\n  useFrame(() => {\r\n    mesh.current.rotation.y += 0.01 * timeMod;\r\n    if (isActiveRef.current) {\r\n      time.current += 0.03;\r\n      mesh.current.position.y = position[1] + Math.sin(time.current) * 0.4;\r\n    }\r\n  });\r\n\r\n  const onClick = useCallback(\r\n    e => {\r\n      e.stopPropagation();\r\n      setIsActive(v => !v);\r\n    },\r\n    [setIsActive]\r\n  );\r\n\r\n  return (\r\n    <mesh\r\n      ref={mesh}\r\n      position={position}\r\n      onClick={e => onClick(e)}\r\n  \r\n    >\r\n\r\n{/* Below in args, the first argument is the size of the spheres\r\nthe second argument is  */}\r\n      <sphereBufferGeometry attach=\"geometry\" args={[0.0047, 5, 0.29]} />\r\n\r\n      <meshStandardMaterial\r\n        attach=\"material\"\r\n        color={color}\r\n        roughness={0.6}\r\n        metalness={0.1}\r\n      />\r\n    </mesh>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}