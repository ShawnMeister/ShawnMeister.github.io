{"ast":null,"code":"import _slicedToArray from\"D:\\\\Users\\\\Shawn\\\\Documents\\\\GitHub\\\\Shawn-Portfolio\\\\portfolio\\\\react-3dAxe-landing\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useMemo,useRef,useState,useEffect}from\"react\";import{random}from\"lodash\";import{useFrame}from\"react-three-fiber\";export default(function(){//mutable objects can be changed after they are created\n//the useRef method is used to keep track everytime something is rendered\n//it is generally used for counter variables, or variables that we want to keep\n//track of outside the scope of the normal rendering of React\nvar mesh=useRef();var time=useRef(0);var _useState=useState(false),_useState2=_slicedToArray(_useState,1),isActive=_useState2[0];var isActiveRef=useRef(isActive);// position\nvar position=useMemo(function(){return[random(-5,50,true),random(-10,10,true),random(-5,5,true)];},[]);// random time mod factor\nvar timeMod=useMemo(function(){return random(0.1,4,true);},[]);// color\nvar color=0x61dafb;//useEffect of the activeState\nuseEffect(function(){isActiveRef.current=isActive;},[isActive]);// raf loop\n//this is what causes motion of the spheres\nuseFrame(function(){mesh.current.rotation.y+=0.01*timeMod;if(isActiveRef.current){time.current+=0.03;mesh.current.position.y=position[1]+Math.sin(time.current)*0.4;}});return/*#__PURE__*/React.createElement(\"mesh\",{ref:mesh,position:position},/*#__PURE__*/React.createElement(\"sphereBufferGeometry\",{attach:\"geometry\",args:[0.00647,0.00005,7]}),/*#__PURE__*/React.createElement(\"meshStandardMaterial\",{attach:\"material\",color:color,roughness:0.6,metalness:0.1}));});","map":{"version":3,"sources":["D:/Users/Shawn/Documents/GitHub/Shawn-Portfolio/portfolio/react-3dAxe-landing/src/Components/BlueSpheres/Sphere.js"],"names":["React","useMemo","useRef","useState","useEffect","random","useFrame","mesh","time","isActive","isActiveRef","position","timeMod","color","current","rotation","y","Math","sin"],"mappings":"gNAAA,MAAOA,CAAAA,KAAP,EACEC,OADF,CAEEC,MAFF,CAGEC,QAHF,CAIEC,SAJF,KAKO,OALP,CAMA,OAASC,MAAT,KAAuB,QAAvB,CACA,OAASC,QAAT,KAAyB,mBAAzB,CAEA,eAAe,UAAM,CAEnB;AACA;AACA;AACA;AACA,GAAMC,CAAAA,IAAI,CAAGL,MAAM,EAAnB,CACA,GAAMM,CAAAA,IAAI,CAAGN,MAAM,CAAC,CAAD,CAAnB,CAPmB,cAUAC,QAAQ,CAAC,KAAD,CAVR,wCAUZM,QAVY,eAYnB,GAAMC,CAAAA,WAAW,CAAGR,MAAM,CAACO,QAAD,CAA1B,CAEA;AACA,GAAME,CAAAA,QAAQ,CAAGV,OAAO,CAAC,UAAM,CAC7B,MAAO,CAACI,MAAM,CAAC,CAAC,CAAF,CAAK,EAAL,CAAS,IAAT,CAAP,CAAuBA,MAAM,CAAC,CAAC,EAAF,CAAM,EAAN,CAAU,IAAV,CAA7B,CAA8CA,MAAM,CAAC,CAAC,CAAF,CAAK,CAAL,CAAQ,IAAR,CAApD,CAAP,CACD,CAFuB,CAErB,EAFqB,CAAxB,CAIA;AACA,GAAMO,CAAAA,OAAO,CAAGX,OAAO,CAAC,iBAAMI,CAAAA,MAAM,CAAC,GAAD,CAAM,CAAN,CAAS,IAAT,CAAZ,EAAD,CAA6B,EAA7B,CAAvB,CAEA;AACA,GAAIQ,CAAAA,KAAK,CAAG,QAAZ,CAEA;AACAT,SAAS,CAAC,UAAM,CACdM,WAAW,CAACI,OAAZ,CAAsBL,QAAtB,CACD,CAFQ,CAEN,CAACA,QAAD,CAFM,CAAT,CAIA;AACA;AACAH,QAAQ,CAAC,UAAM,CACbC,IAAI,CAACO,OAAL,CAAaC,QAAb,CAAsBC,CAAtB,EAA2B,KAAOJ,OAAlC,CACA,GAAIF,WAAW,CAACI,OAAhB,CAAyB,CACvBN,IAAI,CAACM,OAAL,EAAgB,IAAhB,CACAP,IAAI,CAACO,OAAL,CAAaH,QAAb,CAAsBK,CAAtB,CAA0BL,QAAQ,CAAC,CAAD,CAAR,CAAcM,IAAI,CAACC,GAAL,CAASV,IAAI,CAACM,OAAd,EAAyB,GAAjE,CACD,CACF,CANO,CAAR,CAYA,mBACE,4BACE,GAAG,CAAEP,IADP,CAEE,QAAQ,CAAEI,QAFZ,eAQE,4CAAsB,MAAM,CAAC,UAA7B,CAAwC,IAAI,CAAE,CAAC,OAAD,CAAU,OAAV,CAAmB,CAAnB,CAA9C,EARF,cAUE,4CACE,MAAM,CAAC,UADT,CAEE,KAAK,CAAEE,KAFT,CAGE,SAAS,CAAE,GAHb,CAIE,SAAS,CAAE,GAJb,EAVF,CADF,CAmBD,CA/DD","sourcesContent":["import React, {\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n  useEffect\r\n} from \"react\";\r\nimport { random } from \"lodash\";\r\nimport { useFrame } from \"react-three-fiber\";\r\n\r\nexport default () => {\r\n\r\n  //mutable objects can be changed after they are created\r\n  //the useRef method is used to keep track everytime something is rendered\r\n  //it is generally used for counter variables, or variables that we want to keep\r\n  //track of outside the scope of the normal rendering of React\r\n  const mesh = useRef();\r\n  const time = useRef(0);\r\n\r\n\r\n  const [isActive] = useState(false);\r\n\r\n  const isActiveRef = useRef(isActive);\r\n\r\n  // position\r\n  const position = useMemo(() => {\r\n    return [random(-5, 50, true), random(-10, 10, true), random(-5, 5, true)];\r\n  }, []);\r\n\r\n  // random time mod factor\r\n  const timeMod = useMemo(() => random(0.1, 4, true), []);\r\n\r\n  // color\r\n  let color = 0x61dafb;\r\n\r\n  //useEffect of the activeState\r\n  useEffect(() => {\r\n    isActiveRef.current = isActive;\r\n  }, [isActive]);\r\n\r\n  // raf loop\r\n  //this is what causes motion of the spheres\r\n  useFrame(() => {\r\n    mesh.current.rotation.y += 0.01 * timeMod;\r\n    if (isActiveRef.current) {\r\n      time.current += 0.03;\r\n      mesh.current.position.y = position[1] + Math.sin(time.current) * 0.4;\r\n    }\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <mesh\r\n      ref={mesh}\r\n      position={position}\r\n\r\n    >\r\n\r\n      {/* Below in args, the first argument is the size of the spheres\r\nthe second argument is  */}\r\n      <sphereBufferGeometry attach=\"geometry\" args={[0.00647, 0.00005, 7]} />\r\n\r\n      <meshStandardMaterial\r\n        attach=\"material\"\r\n        color={color}\r\n        roughness={0.6}\r\n        metalness={0.1}\r\n      />\r\n    </mesh>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}