{"ast":null,"code":"import _slicedToArray from\"D:\\\\Users\\\\Shawn\\\\Documents\\\\GitHub\\\\Shawn-Portfolio\\\\portfolio\\\\react-3dAxe-landing\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useMemo,useRef,useState,useEffect,useCallback}from\"react\";import{random}from\"lodash\";import{useFrame}from\"react-three-fiber\";export default(function(){var mesh=useRef();var time=useRef(0);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isActive=_useState2[0],setIsActive=_useState2[1];var isActiveRef=useRef(isActive);// position\nvar position=useMemo(function(){return[random(-5,5,true),random(-10,10,true),random(-5,5,true)];},[]);// random time mod factor\nvar timeMod=useMemo(function(){return random(0.1,4,true);},[]);// color\nvar color=0xf8f8ff;//useEffect of the activeState\nuseEffect(function(){isActiveRef.current=isActive;},[isActive]);// raf loop\nuseFrame(function(){mesh.current.rotation.y+=0.01*timeMod;if(isActiveRef.current){time.current+=0.03;mesh.current.position.y=position[1]+Math.sin(time.current)*0.4;}});var _onClick=useCallback(function(e){e.stopPropagation();setIsActive(function(v){return!v;});},[setIsActive]);return/*#__PURE__*/React.createElement(\"mesh\",{ref:mesh,position:position,onClick:function onClick(e){return _onClick(e);}},/*#__PURE__*/React.createElement(\"sphereBufferGeometry\",{attach:\"geometry\",args:[0.0047,5,0.29]}),/*#__PURE__*/React.createElement(\"meshStandardMaterial\",{attach:\"material\",color:color,roughness:0.6,metalness:0.1}));});","map":{"version":3,"sources":["D:/Users/Shawn/Documents/GitHub/Shawn-Portfolio/portfolio/react-3dAxe-landing/src/Components/WhiteSpheres/Sphere.js"],"names":["React","useMemo","useRef","useState","useEffect","useCallback","random","useFrame","mesh","time","isActive","setIsActive","isActiveRef","position","timeMod","color","current","rotation","y","Math","sin","onClick","e","stopPropagation","v"],"mappings":"gNAAA,MAAOA,CAAAA,KAAP,EACEC,OADF,CAEEC,MAFF,CAGEC,QAHF,CAIEC,SAJF,CAKEC,WALF,KAMO,OANP,CAOA,OAASC,MAAT,KAAuB,QAAvB,CACA,OAASC,QAAT,KAAyB,mBAAzB,CAEA,eAAe,UAAM,CACnB,GAAMC,CAAAA,IAAI,CAAGN,MAAM,EAAnB,CACA,GAAMO,CAAAA,IAAI,CAAGP,MAAM,CAAC,CAAD,CAAnB,CAFmB,cAKaC,QAAQ,CAAC,KAAD,CALrB,wCAKZO,QALY,eAKFC,WALE,eAOnB,GAAMC,CAAAA,WAAW,CAAGV,MAAM,CAACQ,QAAD,CAA1B,CAEA;AACA,GAAMG,CAAAA,QAAQ,CAAGZ,OAAO,CAAC,UAAM,CAC7B,MAAO,CAACK,MAAM,CAAC,CAAC,CAAF,CAAK,CAAL,CAAQ,IAAR,CAAP,CAAsBA,MAAM,CAAC,CAAC,EAAF,CAAM,EAAN,CAAU,IAAV,CAA5B,CAA6CA,MAAM,CAAC,CAAC,CAAF,CAAK,CAAL,CAAQ,IAAR,CAAnD,CAAP,CACD,CAFuB,CAErB,EAFqB,CAAxB,CAIA;AACA,GAAMQ,CAAAA,OAAO,CAAGb,OAAO,CAAC,iBAAMK,CAAAA,MAAM,CAAC,GAAD,CAAM,CAAN,CAAS,IAAT,CAAZ,EAAD,CAA6B,EAA7B,CAAvB,CAEA;AACA,GAAIS,CAAAA,KAAK,CAAG,QAAZ,CAGA;AACAX,SAAS,CAAC,UAAM,CACdQ,WAAW,CAACI,OAAZ,CAAsBN,QAAtB,CACD,CAFQ,CAEN,CAACA,QAAD,CAFM,CAAT,CAIA;AACAH,QAAQ,CAAC,UAAM,CACbC,IAAI,CAACQ,OAAL,CAAaC,QAAb,CAAsBC,CAAtB,EAA2B,KAAOJ,OAAlC,CACA,GAAIF,WAAW,CAACI,OAAhB,CAAyB,CACvBP,IAAI,CAACO,OAAL,EAAgB,IAAhB,CACAR,IAAI,CAACQ,OAAL,CAAaH,QAAb,CAAsBK,CAAtB,CAA0BL,QAAQ,CAAC,CAAD,CAAR,CAAcM,IAAI,CAACC,GAAL,CAASX,IAAI,CAACO,OAAd,EAAyB,GAAjE,CACD,CACF,CANO,CAAR,CAQA,GAAMK,CAAAA,QAAO,CAAGhB,WAAW,CACzB,SAAAiB,CAAC,CAAI,CACHA,CAAC,CAACC,eAAF,GACAZ,WAAW,CAAC,SAAAa,CAAC,QAAI,CAACA,CAAL,EAAF,CAAX,CACD,CAJwB,CAKzB,CAACb,WAAD,CALyB,CAA3B,CAQA,mBACE,4BACE,GAAG,CAAEH,IADP,CAEE,QAAQ,CAAEK,QAFZ,CAGE,OAAO,CAAE,iBAAAS,CAAC,QAAID,CAAAA,QAAO,CAACC,CAAD,CAAX,EAHZ,eASE,4CAAsB,MAAM,CAAC,UAA7B,CAAwC,IAAI,CAAE,CAAC,MAAD,CAAS,CAAT,CAAY,IAAZ,CAA9C,EATF,cAWE,4CACE,MAAM,CAAC,UADT,CAEE,KAAK,CAAEP,KAFT,CAGE,SAAS,CAAE,GAHb,CAIE,SAAS,CAAE,GAJb,EAXF,CADF,CAoBD,CA/DD","sourcesContent":["import React, {\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  useCallback\r\n} from \"react\";\r\nimport { random } from \"lodash\";\r\nimport { useFrame } from \"react-three-fiber\";\r\n\r\nexport default () => {\r\n  const mesh = useRef();\r\n  const time = useRef(0);\r\n\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  const isActiveRef = useRef(isActive);\r\n\r\n  // position\r\n  const position = useMemo(() => {\r\n    return [random(-5, 5, true), random(-10, 10, true), random(-5, 5, true)];\r\n  }, []);\r\n\r\n  // random time mod factor\r\n  const timeMod = useMemo(() => random(0.1, 4, true), []);\r\n\r\n  // color\r\n  let color = 0xf8f8ff;\r\n\r\n\r\n  //useEffect of the activeState\r\n  useEffect(() => {\r\n    isActiveRef.current = isActive;\r\n  }, [isActive]);\r\n\r\n  // raf loop\r\n  useFrame(() => {\r\n    mesh.current.rotation.y += 0.01 * timeMod;\r\n    if (isActiveRef.current) {\r\n      time.current += 0.03;\r\n      mesh.current.position.y = position[1] + Math.sin(time.current) * 0.4;\r\n    }\r\n  });\r\n\r\n  const onClick = useCallback(\r\n    e => {\r\n      e.stopPropagation();\r\n      setIsActive(v => !v);\r\n    },\r\n    [setIsActive]\r\n  );\r\n\r\n  return (\r\n    <mesh\r\n      ref={mesh}\r\n      position={position}\r\n      onClick={e => onClick(e)}\r\n  \r\n    >\r\n\r\n{/* Below in args, the first argument is the size of the spheres\r\nthe second argument is  */}\r\n      <sphereBufferGeometry attach=\"geometry\" args={[0.0047, 5, 0.29]} />\r\n\r\n      <meshStandardMaterial\r\n        attach=\"material\"\r\n        color={color}\r\n        roughness={0.6}\r\n        metalness={0.1}\r\n      />\r\n    </mesh>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}