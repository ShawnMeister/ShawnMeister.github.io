{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Shawn\\\\Documents\\\\GitHub\\\\Shawn-Portfolio\\\\portfolio\\\\react-3dAxe-landing\\\\src\\\\Components\\\\Animations\\\\Animations.js\";\n\n/*\r\n\r\nEmerald Params are below\r\n\r\nmagic button that goes to portfolio from landing Page\r\n\r\nconst radius 8\r\nwidthSegment goes from 31 to 3 while\r\nheightsegment goes from 32 to 4\r\nconst phistart 6\r\n\r\nphilength goes from 6.3 to 0 while\r\nthetastart goes from 6 to 0\r\n\r\nphilength goes back to 6.3 and goes to 0 while\r\nthetalength drops from 6.3 to 0\r\n\r\n\r\nradius\r\nwidthSegments\r\nheightSegments\r\nphiStart\r\nphiLength\r\nthetaStart\r\nthetaLength\r\n\r\n*/\nimport { useFrame, useLoader, useThree } from \"react-three-fiber\";\nimport React, { useEffect, useMemo, useRef } from \"react\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport * as THREE from \"three\";\nimport { WebGLRenderer } from \"three\";\n\nconst Animations = ({\n  showForeground,\n  isDisplayed,\n  callbackFromParent\n}) => {\n  const meshRef = useRef();\n  const diamondRef = useRef();\n  const time = useRef(0); // position\n\n  /*   const position = useMemo(() => {\r\n  \treturn [random(-5, 5, true), random(-10, 10, true), random(-5, 5, true)];\r\n  \t}, []); */\n\n  const position = useMemo(() => {\n    return [0, 0, 0];\n  }, []); // random time mod factor\n\n  /*  const timeMod = useMemo(() => random(0.1, 4, true), []); */\n  //const timeMod = useMemo(() => 2, []);\n  // color\n  // let color = isHovered ? 0xe5d54d : (isActive ? 0xf7e7e5 : 0xf95b3c);\n  // raf loop\n  //that means request animation frame\n\n  useFrame(() => {\n    /* mesh.current.rotation.y += 0.01 * timeMod; */\n    if (!axeToEmeraldAnimationDone) {\n      meshRef.current.rotation.y += 0.05;\n    }\n  }); // Hover Events\n\n  /*   const onHover = useCallback(\r\n  \t(e, value) => {\r\n  \t  e.stopPropagation();\r\n  \t  setIsHovered(value);\r\n  \t},\r\n  \t[setIsHovered]\r\n    ); */\n  // const onClick = useCallback(\n  //   (e) => {\n  //     e.stopPropagation();\n  //     setIsActive((v) => !v);\n  //   },\n  //   [setIsActive]\n  // );\n\n  const model = useLoader(GLTFLoader, \"/scene.gltf\");\n  const axeRef = useRef();\n  const {\n    viewport\n  } = useThree();\n  let readyToExplode = false;\n  let explosionDone = false;\n  let countAxeClicks = 0;\n  let introAnimationDone = false;\n  let axeToEmeraldAnimationDone = false;\n  let isAxeClicked = false;\n  let clockwiseFlag = false;\n  let zTiltCounter = 0;\n  let frameCounter = 0;\n  const zlowTilt = 1.65;\n  const zhighTilt = 1.9;\n  const zTiltSpeed = 0.04;\n  const zlowTiltUpperBoundary = zlowTilt + zTiltSpeed * 1.5;\n  const zlowTiltBottomBoundary = zlowTilt - zTiltSpeed * 1.5;\n  const zhighTiltUpperBoundary = zhighTilt + zTiltSpeed * 1.5;\n  const zhighTiltBottomBoundary = zhighTilt - zTiltSpeed * 1.5;\n\n  const axeClicked = () => {\n    if (introAnimationDone === true) {\n      isAxeClicked = true;\n      frameCounter = 0;\n    }\n  };\n\n  useEffect(() => {\n    const renderer = new WebGLRenderer({\n      antialias: true\n    });\n    renderer.outputEncoding = THREE.sRGBEncoding;\n  }, []);\n\n  const floatAxe = () => {\n    if (frameCounter < 76) {\n      axeRef.current.rotation.x = axeRef.current.rotation.x - 0.0001;\n      axeRef.current.rotation.y = axeRef.current.rotation.y + 0.0001;\n    } else if (frameCounter < 150) {\n      axeRef.current.rotation.x = axeRef.current.rotation.x + 0.0001;\n      axeRef.current.rotation.y = axeRef.current.rotation.y - 0.0001;\n    }\n\n    if (frameCounter > 150) {\n      frameCounter = 0;\n      zTiltCounter = 0;\n    }\n  };\n\n  const axeToEmeraldAnimation = () => {\n    let toEmeraldFlag = false;\n    backAndForth();\n\n    if (countAxeClicks === 2) {\n      toEmeraldFlag = true;\n      backAndForth();\n    }\n\n    function backAndForth() {\n      if (isAxeClicked === true && introAnimationDone === true && axeToEmeraldAnimationDone === false && frameCounter < 50 && countAxeClicks < 3) {\n        axeRef.current.position.x = axeRef.current.position.x + 0.2025;\n        axeRef.current.position.y = axeRef.current.position.y + 0.05;\n\n        if (toEmeraldFlag === false) {\n          axeRef.current.position.z = axeRef.current.position.z + 0.01;\n        } else if (toEmeraldFlag === true) {\n          axeRef.current.position.z = axeRef.current.position.z - 0.2;\n          axeRef.current.rotation.z = axeRef.current.rotation.z - 1.25;\n        }\n\n        frameCounter = frameCounter + 1;\n      } else if (isAxeClicked === true && introAnimationDone === true && axeToEmeraldAnimationDone === false && frameCounter >= 50 && frameCounter < 100 && countAxeClicks < 3) {\n        //last time goes to emerald\n        if (toEmeraldFlag === false) {\n          axeRef.current.position.x = axeRef.current.position.x - 0.2;\n          axeRef.current.position.y = axeRef.current.position.y - 0.05;\n        } else if (toEmeraldFlag === true) {\n          axeRef.current.position.x = axeRef.current.position.x - 0.2;\n          axeRef.current.position.y = axeRef.current.position.y - 0.05;\n          axeRef.current.rotation.z = axeRef.current.rotation.z + 1.25;\n\n          if (axeRef.current.position.x < 1.05) {\n            axeToEmeraldAnimationDone = true;\n            isAxeClicked = false;\n          }\n        }\n\n        frameCounter = frameCounter + 1;\n\n        if (frameCounter === 100) {\n          countAxeClicks = countAxeClicks + 1;\n        }\n      }\n    }\n  };\n\n  const smashTheEmerald = mouse => {\n    if (mouse.x > 0.35 && isAxeClicked === true && axeToEmeraldAnimationDone === true) {\n      axeRef.current.position.x = mouse.x * viewport.width / 2;\n      axeRef.current.position.y = mouse.y * viewport.height / 2;\n      axeRef.current.rotation.z = -0.2;\n      axeRef.current.rotation.x = -0.02;\n    } else if (mouse.x > 0.3 && isAxeClicked === true && axeToEmeraldAnimationDone === true) {\n      axeRef.current.position.x = mouse.x * viewport.width / 2;\n      axeRef.current.position.y = mouse.y * viewport.height / 2;\n      axeRef.current.rotation.z = 0;\n      axeRef.current.rotation.x = 0;\n    } else if (mouse.x > 0.25 && isAxeClicked === true && axeToEmeraldAnimationDone === true) {\n      axeRef.current.position.x = mouse.x * viewport.width / 2;\n      axeRef.current.position.y = mouse.y * viewport.height / 2;\n      axeRef.current.rotation.z = 0.2;\n      axeRef.current.rotation.x = 0.02;\n    } else if (mouse.x > 0.25 && isAxeClicked === true && axeToEmeraldAnimationDone === true) {\n      axeRef.current.position.x = mouse.x * viewport.width / 2;\n      axeRef.current.position.y = mouse.y * viewport.height / 2;\n      axeRef.current.rotation.z = 0.4;\n      axeRef.current.rotation.x = 0.04;\n    } else if (mouse.x > 0.2 && isAxeClicked === true && axeToEmeraldAnimationDone === true) {\n      axeRef.current.position.x = mouse.x * viewport.width / 2;\n      axeRef.current.position.y = mouse.y * viewport.height / 2;\n      axeRef.current.rotation.z = 0.6;\n      axeRef.current.rotation.x = 0.06;\n    } else if (mouse.x > -5 && isAxeClicked === true && axeToEmeraldAnimationDone === true) {\n      axeRef.current.position.x = mouse.x * viewport.width / 2;\n      axeRef.current.position.y = mouse.y * viewport.height / 2;\n      axeRef.current.rotation.z = 0.6;\n      axeRef.current.rotation.x = 0.06;\n    }\n\n    if (mouse.x > -0.2 && mouse.x < 0.2 && mouse.y > -0.2 && mouse.y < 0.2 && isAxeClicked === true && axeToEmeraldAnimationDone === true && frameCounter > 100) {\n      readyToExplode = true;\n    }\n  };\n\n  const wiggleAxe = () => {\n    frameCounter = frameCounter + 1;\n    floatAxe();\n\n    if (axeRef.current.rotation.z > zlowTilt && axeRef.current.rotation.z < zhighTilt && clockwiseFlag === false) {\n      if (zTiltCounter < 4 && zTiltCounter > -1) {\n        axeRef.current.rotation.z = axeRef.current.rotation.z + zTiltSpeed;\n\n        if (zTiltCounter < 2) {\n          axeRef.current.rotation.y = axeRef.current.rotation.y + zTiltSpeed / 10;\n          axeRef.current.rotation.x = axeRef.current.rotation.x + zTiltSpeed / 10;\n        } else if (zTiltCounter < 4) {\n          axeRef.current.rotation.y = axeRef.current.rotation.y - zTiltSpeed / 10;\n          axeRef.current.rotation.x = axeRef.current.rotation.x - zTiltSpeed / 10;\n        }\n      }\n\n      if (axeRef.current.rotation.z > zhighTiltBottomBoundary && axeRef.current.rotation.z < zhighTiltUpperBoundary) {\n        clockwiseFlag = true;\n        zTiltCounter = zTiltCounter + 1;\n      }\n    }\n\n    if (axeRef.current.rotation.z < zhighTiltUpperBoundary && axeRef.current.rotation.z > zlowTiltBottomBoundary && clockwiseFlag === true) {\n      axeRef.current.rotation.z = axeRef.current.rotation.z - zTiltSpeed;\n\n      if (axeRef.current.rotation.z > zlowTiltBottomBoundary && axeRef.current.rotation.z < zlowTiltUpperBoundary) {\n        clockwiseFlag = false;\n        zTiltCounter = zTiltCounter + 1;\n      }\n    }\n  }; //the control frame\n\n\n  useFrame(({\n    mouse\n  }) => {\n    if (explosionDone === false) {\n      frameCounter = frameCounter + 1;\n\n      if (frameCounter > 50 && frameCounter <= 100 && introAnimationDone === false && isAxeClicked === false) {\n        axeRef.current.rotation.y = axeRef.current.rotation.y + 0.1255 * 2;\n\n        if (axeRef.current.rotation.y > 12.5) {\n          introAnimationDone = true;\n          frameCounter = 0;\n        }\n      }\n\n      if (isAxeClicked === false && introAnimationDone === true && axeToEmeraldAnimationDone === false) {\n        wiggleAxe();\n      }\n\n      if (axeToEmeraldAnimationDone === false) {\n        axeToEmeraldAnimation();\n      }\n\n      smashTheEmerald(mouse);\n    } else {\n      axeRef.current.position.x = 100;\n    }\n  });\n  const sphereRef = useRef();\n  let base = 2;\n  let s = 0.06;\n  const sphere2Ref = useRef();\n  let base2 = 1;\n  let s2 = 0.1;\n  let tempCounter = -1;\n  let tempCounterSetBool = false;\n  let afterFirst = false;\n  useFrame(() => {\n    if (readyToExplode === true && tempCounterSetBool === false) {\n      tempCounterSetBool = true;\n      tempCounter = frameCounter + 5;\n    }\n\n    if (readyToExplode === true) {\n      base = s + base;\n      sphereRef.current.scale.set(base, base, base);\n    }\n\n    if (readyToExplode === true && tempCounterSetBool === true && frameCounter === tempCounter && afterFirst === false) {\n      base2 = s2 + base2;\n      afterFirst = true;\n      sphere2Ref.current.scale.set(base2, base2, base2);\n    }\n\n    if (afterFirst === true && explosionDone === false) {\n      base2 = s2 + base2;\n      sphere2Ref.current.scale.set(base2, base2, base2);\n\n      if (explosionDone === false) {}\n\n      setTimeout(function () {\n        if (explosionDone === false) {\n          explosionDone = true;\n          showForeground = true;\n          callbackFromParent(showForeground);\n          axeRef.current.visible = false;\n          meshRef.current.visible = false;\n          sphere2Ref.current.visible = false;\n          sphereRef.current.visible = false;\n          diamondRef.current.visible = false;\n        }\n      }, 1800);\n    }\n  }); // const myCallback = (dataFromChild) => {\n  //   dataFromChild = showForeground;\n  // };\n\n  return [/*#__PURE__*/React.createElement(\"group\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: axeRef,\n    object: model.scene,\n    position: [0, 0, 0],\n    rotation: [0, 0, 1.75],\n    scale: [10, 10, 10],\n    onClick: axeClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: sphereRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    args: [0.5, 30, 30],\n    attach: \"geometry\",\n    roughness: 0.5,\n    transparency: 0.9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    color: 0x61dafb,\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: sphere2Ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    args: [0.5, 30, 30],\n    attach: \"geometry\",\n    roughness: 0.5,\n    transparency: 0.9,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    color: 0x39ff14,\n    attach: \"material\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: meshRef,\n    position: position // onClick={(e) => onClick(e)}\n    //onPointerOver={e => onHover(e, true)}\n    //onPointerOut={e => onHover(e, false)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 6.3, 6.3, 6, 6.3, 6.3, 6.3],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: 0x39ff14,\n    roughness: 0.5,\n    metalness: 0.5,\n    ref: diamondRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 9\n    }\n  })))];\n};\n\nexport default Animations;","map":{"version":3,"sources":["D:/Users/Shawn/Documents/GitHub/Shawn-Portfolio/portfolio/react-3dAxe-landing/src/Components/Animations/Animations.js"],"names":["useFrame","useLoader","useThree","React","useEffect","useMemo","useRef","GLTFLoader","THREE","WebGLRenderer","Animations","showForeground","isDisplayed","callbackFromParent","meshRef","diamondRef","time","position","axeToEmeraldAnimationDone","current","rotation","y","model","axeRef","viewport","readyToExplode","explosionDone","countAxeClicks","introAnimationDone","isAxeClicked","clockwiseFlag","zTiltCounter","frameCounter","zlowTilt","zhighTilt","zTiltSpeed","zlowTiltUpperBoundary","zlowTiltBottomBoundary","zhighTiltUpperBoundary","zhighTiltBottomBoundary","axeClicked","renderer","antialias","outputEncoding","sRGBEncoding","floatAxe","x","axeToEmeraldAnimation","toEmeraldFlag","backAndForth","z","smashTheEmerald","mouse","width","height","wiggleAxe","sphereRef","base","s","sphere2Ref","base2","s2","tempCounter","tempCounterSetBool","afterFirst","scale","set","setTimeout","visible","scene"],"mappings":"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","sourcesContent":["/*\r\n\r\nEmerald Params are below\r\n\r\nmagic button that goes to portfolio from landing Page\r\n\r\nconst radius 8\r\nwidthSegment goes from 31 to 3 while\r\nheightsegment goes from 32 to 4\r\nconst phistart 6\r\n\r\nphilength goes from 6.3 to 0 while\r\nthetastart goes from 6 to 0\r\n\r\nphilength goes back to 6.3 and goes to 0 while\r\nthetalength drops from 6.3 to 0\r\n\r\n\r\nradius\r\nwidthSegments\r\nheightSegments\r\nphiStart\r\nphiLength\r\nthetaStart\r\nthetaLength\r\n\r\n*/\r\n\r\nimport { useFrame, useLoader, useThree } from \"react-three-fiber\";\r\nimport React, { useEffect, useMemo, useRef } from \"react\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport * as THREE from \"three\";\r\nimport { WebGLRenderer } from \"three\";\r\n\r\nconst Animations = ({ showForeground, isDisplayed, callbackFromParent }) => {\r\n  const meshRef = useRef();\r\n  const diamondRef = useRef();\r\n  const time = useRef(0);\r\n\r\n  // position\r\n  /*   const position = useMemo(() => {\r\n\t\t\treturn [random(-5, 5, true), random(-10, 10, true), random(-5, 5, true)];\r\n\t\t\t}, []); */\r\n\r\n  const position = useMemo(() => {\r\n    return [0, 0, 0];\r\n  }, []);\r\n\r\n  // random time mod factor\r\n  /*  const timeMod = useMemo(() => random(0.1, 4, true), []); */\r\n\r\n  //const timeMod = useMemo(() => 2, []);\r\n\r\n  // color\r\n  // let color = isHovered ? 0xe5d54d : (isActive ? 0xf7e7e5 : 0xf95b3c);\r\n\r\n  // raf loop\r\n  //that means request animation frame\r\n  useFrame(() => {\r\n    /* mesh.current.rotation.y += 0.01 * timeMod; */\r\n    if (!axeToEmeraldAnimationDone) {\r\n      meshRef.current.rotation.y += 0.05;\r\n    }\r\n  });\r\n\r\n  // Hover Events\r\n  /*   const onHover = useCallback(\r\n\t\t\t(e, value) => {\r\n\t\t\t  e.stopPropagation();\r\n\t\t\t  setIsHovered(value);\r\n\t\t\t},\r\n\t\t\t[setIsHovered]\r\n\t\t  ); */\r\n\r\n  // const onClick = useCallback(\r\n  //   (e) => {\r\n  //     e.stopPropagation();\r\n  //     setIsActive((v) => !v);\r\n  //   },\r\n  //   [setIsActive]\r\n  // );\r\n\r\n  const model = useLoader(GLTFLoader, \"/scene.gltf\");\r\n\r\n  const axeRef = useRef();\r\n  const { viewport } = useThree();\r\n  let readyToExplode = false;\r\n  let explosionDone = false;\r\n  let countAxeClicks = 0;\r\n  let introAnimationDone = false;\r\n  let axeToEmeraldAnimationDone = false;\r\n  let isAxeClicked = false;\r\n  let clockwiseFlag = false;\r\n  let zTiltCounter = 0;\r\n  let frameCounter = 0;\r\n  const zlowTilt = 1.65;\r\n  const zhighTilt = 1.9;\r\n  const zTiltSpeed = 0.04;\r\n  const zlowTiltUpperBoundary = zlowTilt + zTiltSpeed * 1.5;\r\n  const zlowTiltBottomBoundary = zlowTilt - zTiltSpeed * 1.5;\r\n  const zhighTiltUpperBoundary = zhighTilt + zTiltSpeed * 1.5;\r\n  const zhighTiltBottomBoundary = zhighTilt - zTiltSpeed * 1.5;\r\n\r\n  const axeClicked = () => {\r\n    if (introAnimationDone === true) {\r\n      isAxeClicked = true;\r\n      frameCounter = 0;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const renderer = new WebGLRenderer({ antialias: true });\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n  }, []);\r\n\r\n  const floatAxe = () => {\r\n    if (frameCounter < 76) {\r\n      axeRef.current.rotation.x = axeRef.current.rotation.x - 0.0001;\r\n      axeRef.current.rotation.y = axeRef.current.rotation.y + 0.0001;\r\n    } else if (frameCounter < 150) {\r\n      axeRef.current.rotation.x = axeRef.current.rotation.x + 0.0001;\r\n      axeRef.current.rotation.y = axeRef.current.rotation.y - 0.0001;\r\n    }\r\n    if (frameCounter > 150) {\r\n      frameCounter = 0;\r\n      zTiltCounter = 0;\r\n    }\r\n  };\r\n\r\n  const axeToEmeraldAnimation = () => {\r\n    let toEmeraldFlag = false;\r\n    backAndForth();\r\n\r\n    if (countAxeClicks === 2) {\r\n      toEmeraldFlag = true;\r\n      backAndForth();\r\n    }\r\n\r\n    function backAndForth() {\r\n      if (\r\n        isAxeClicked === true &&\r\n        introAnimationDone === true &&\r\n        axeToEmeraldAnimationDone === false &&\r\n        frameCounter < 50 &&\r\n        countAxeClicks < 3\r\n      ) {\r\n        axeRef.current.position.x = axeRef.current.position.x + 0.2025;\r\n        axeRef.current.position.y = axeRef.current.position.y + 0.05;\r\n        if (toEmeraldFlag === false) {\r\n          axeRef.current.position.z = axeRef.current.position.z + 0.01;\r\n        } else if (toEmeraldFlag === true) {\r\n          axeRef.current.position.z = axeRef.current.position.z - 0.2;\r\n          axeRef.current.rotation.z = axeRef.current.rotation.z - 1.25;\r\n        }\r\n        frameCounter = frameCounter + 1;\r\n      } else if (\r\n        isAxeClicked === true &&\r\n        introAnimationDone === true &&\r\n        axeToEmeraldAnimationDone === false &&\r\n        frameCounter >= 50 &&\r\n        frameCounter < 100 &&\r\n        countAxeClicks < 3\r\n      ) {\r\n        //last time goes to emerald\r\n        if (toEmeraldFlag === false) {\r\n          axeRef.current.position.x = axeRef.current.position.x - 0.2;\r\n          axeRef.current.position.y = axeRef.current.position.y - 0.05;\r\n        } else if (toEmeraldFlag === true) {\r\n          axeRef.current.position.x = axeRef.current.position.x - 0.2;\r\n          axeRef.current.position.y = axeRef.current.position.y - 0.05;\r\n          axeRef.current.rotation.z = axeRef.current.rotation.z + 1.25;\r\n          if (axeRef.current.position.x < 1.05) {\r\n            axeToEmeraldAnimationDone = true;\r\n\r\n            isAxeClicked = false;\r\n          }\r\n        }\r\n        frameCounter = frameCounter + 1;\r\n        if (frameCounter === 100) {\r\n          countAxeClicks = countAxeClicks + 1;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const smashTheEmerald = (mouse) => {\r\n    if (\r\n      mouse.x > 0.35 &&\r\n      isAxeClicked === true &&\r\n      axeToEmeraldAnimationDone === true\r\n    ) {\r\n      axeRef.current.position.x = (mouse.x * viewport.width) / 2;\r\n      axeRef.current.position.y = (mouse.y * viewport.height) / 2;\r\n      axeRef.current.rotation.z = -0.2;\r\n      axeRef.current.rotation.x = -0.02;\r\n    } else if (\r\n      mouse.x > 0.3 &&\r\n      isAxeClicked === true &&\r\n      axeToEmeraldAnimationDone === true\r\n    ) {\r\n      axeRef.current.position.x = (mouse.x * viewport.width) / 2;\r\n      axeRef.current.position.y = (mouse.y * viewport.height) / 2;\r\n      axeRef.current.rotation.z = 0;\r\n      axeRef.current.rotation.x = 0;\r\n    } else if (\r\n      mouse.x > 0.25 &&\r\n      isAxeClicked === true &&\r\n      axeToEmeraldAnimationDone === true\r\n    ) {\r\n      axeRef.current.position.x = (mouse.x * viewport.width) / 2;\r\n      axeRef.current.position.y = (mouse.y * viewport.height) / 2;\r\n      axeRef.current.rotation.z = 0.2;\r\n      axeRef.current.rotation.x = 0.02;\r\n    } else if (\r\n      mouse.x > 0.25 &&\r\n      isAxeClicked === true &&\r\n      axeToEmeraldAnimationDone === true\r\n    ) {\r\n      axeRef.current.position.x = (mouse.x * viewport.width) / 2;\r\n      axeRef.current.position.y = (mouse.y * viewport.height) / 2;\r\n      axeRef.current.rotation.z = 0.4;\r\n      axeRef.current.rotation.x = 0.04;\r\n    } else if (\r\n      mouse.x > 0.2 &&\r\n      isAxeClicked === true &&\r\n      axeToEmeraldAnimationDone === true\r\n    ) {\r\n      axeRef.current.position.x = (mouse.x * viewport.width) / 2;\r\n      axeRef.current.position.y = (mouse.y * viewport.height) / 2;\r\n      axeRef.current.rotation.z = 0.6;\r\n      axeRef.current.rotation.x = 0.06;\r\n    } else if (\r\n      mouse.x > -5 &&\r\n      isAxeClicked === true &&\r\n      axeToEmeraldAnimationDone === true\r\n    ) {\r\n      axeRef.current.position.x = (mouse.x * viewport.width) / 2;\r\n      axeRef.current.position.y = (mouse.y * viewport.height) / 2;\r\n      axeRef.current.rotation.z = 0.6;\r\n      axeRef.current.rotation.x = 0.06;\r\n    }\r\n\r\n    if (\r\n      mouse.x > -0.2 &&\r\n      mouse.x < 0.2 &&\r\n      mouse.y > -0.2 &&\r\n      mouse.y < 0.2 &&\r\n      isAxeClicked === true &&\r\n      axeToEmeraldAnimationDone === true &&\r\n      frameCounter > 100\r\n    ) {\r\n      readyToExplode = true;\r\n    }\r\n  };\r\n\r\n  const wiggleAxe = () => {\r\n    frameCounter = frameCounter + 1;\r\n\r\n    floatAxe();\r\n\r\n    if (\r\n      axeRef.current.rotation.z > zlowTilt &&\r\n      axeRef.current.rotation.z < zhighTilt &&\r\n      clockwiseFlag === false\r\n    ) {\r\n      if (zTiltCounter < 4 && zTiltCounter > -1) {\r\n        axeRef.current.rotation.z = axeRef.current.rotation.z + zTiltSpeed;\r\n        if (zTiltCounter < 2) {\r\n          axeRef.current.rotation.y =\r\n            axeRef.current.rotation.y + zTiltSpeed / 10;\r\n          axeRef.current.rotation.x =\r\n            axeRef.current.rotation.x + zTiltSpeed / 10;\r\n        } else if (zTiltCounter < 4) {\r\n          axeRef.current.rotation.y =\r\n            axeRef.current.rotation.y - zTiltSpeed / 10;\r\n          axeRef.current.rotation.x =\r\n            axeRef.current.rotation.x - zTiltSpeed / 10;\r\n        }\r\n      }\r\n\r\n      if (\r\n        axeRef.current.rotation.z > zhighTiltBottomBoundary &&\r\n        axeRef.current.rotation.z < zhighTiltUpperBoundary\r\n      ) {\r\n        clockwiseFlag = true;\r\n        zTiltCounter = zTiltCounter + 1;\r\n      }\r\n    }\r\n\r\n    if (\r\n      axeRef.current.rotation.z < zhighTiltUpperBoundary &&\r\n      axeRef.current.rotation.z > zlowTiltBottomBoundary &&\r\n      clockwiseFlag === true\r\n    ) {\r\n      axeRef.current.rotation.z = axeRef.current.rotation.z - zTiltSpeed;\r\n\r\n      if (\r\n        axeRef.current.rotation.z > zlowTiltBottomBoundary &&\r\n        axeRef.current.rotation.z < zlowTiltUpperBoundary\r\n      ) {\r\n        clockwiseFlag = false;\r\n        zTiltCounter = zTiltCounter + 1;\r\n      }\r\n    }\r\n  };\r\n  //the control frame\r\n  useFrame(({ mouse }) => {\r\n    if (explosionDone === false) {\r\n      frameCounter = frameCounter + 1;\r\n\r\n      if (\r\n        frameCounter > 50 &&\r\n        frameCounter <= 100 &&\r\n        introAnimationDone === false &&\r\n        isAxeClicked === false\r\n      ) {\r\n        axeRef.current.rotation.y = axeRef.current.rotation.y + 0.1255 * 2;\r\n        if (axeRef.current.rotation.y > 12.5) {\r\n          introAnimationDone = true;\r\n          frameCounter = 0;\r\n        }\r\n      }\r\n\r\n      if (\r\n        isAxeClicked === false &&\r\n        introAnimationDone === true &&\r\n        axeToEmeraldAnimationDone === false\r\n      ) {\r\n        wiggleAxe();\r\n      }\r\n\r\n      if (axeToEmeraldAnimationDone === false) {\r\n        axeToEmeraldAnimation();\r\n      }\r\n\r\n      smashTheEmerald(mouse);\r\n    } else {\r\n      axeRef.current.position.x = 100;\r\n    }\r\n  });\r\n\r\n  const sphereRef = useRef();\r\n  let base = 2;\r\n  let s = 0.06;\r\n\r\n  const sphere2Ref = useRef();\r\n  let base2 = 1;\r\n  let s2 = 0.1;\r\n  let tempCounter = -1;\r\n  let tempCounterSetBool = false;\r\n  let afterFirst = false;\r\n\r\n  useFrame(() => {\r\n    if (readyToExplode === true && tempCounterSetBool === false) {\r\n      tempCounterSetBool = true;\r\n      tempCounter = frameCounter + 5;\r\n    }\r\n    if (readyToExplode === true) {\r\n      base = s + base;\r\n      sphereRef.current.scale.set(base, base, base);\r\n    }\r\n\r\n    if (\r\n      readyToExplode === true &&\r\n      tempCounterSetBool === true &&\r\n      frameCounter === tempCounter &&\r\n      afterFirst === false\r\n    ) {\r\n      base2 = s2 + base2;\r\n\r\n      afterFirst = true;\r\n      sphere2Ref.current.scale.set(base2, base2, base2);\r\n    }\r\n\r\n    if (afterFirst === true && explosionDone === false) {\r\n      base2 = s2 + base2;\r\n      sphere2Ref.current.scale.set(base2, base2, base2);\r\n\r\n      if (explosionDone === false) {\r\n      }\r\n      setTimeout(function () {\r\n        if (explosionDone === false) {\r\n          explosionDone = true;\r\n          showForeground = true;\r\n          callbackFromParent(showForeground);\r\n          axeRef.current.visible = false;\r\n          meshRef.current.visible = false;\r\n          sphere2Ref.current.visible = false;\r\n          sphereRef.current.visible = false;\r\n          diamondRef.current.visible = false;\r\n        }\r\n      }, 1800);\r\n    }\r\n  });\r\n\r\n  // const myCallback = (dataFromChild) => {\r\n  //   dataFromChild = showForeground;\r\n  // };\r\n\r\n  return [\r\n    <group>\r\n      <mesh>\r\n        <primitive\r\n          ref={axeRef}\r\n          object={model.scene}\r\n          position={[0, 0, 0]}\r\n          rotation={[0, 0, 1.75]}\r\n          scale={[10, 10, 10]}\r\n          onClick={axeClicked}\r\n        />\r\n      </mesh>\r\n      <mesh ref={sphereRef}>\r\n        <sphereBufferGeometry\r\n          args={[0.5, 30, 30]}\r\n          attach=\"geometry\"\r\n          roughness={0.5}\r\n          transparency={0.9}\r\n        />\r\n        <meshBasicMaterial color={0x61dafb} attach=\"material\" />\r\n      </mesh>\r\n      <mesh ref={sphere2Ref}>\r\n        <sphereBufferGeometry\r\n          args={[0.5, 30, 30]}\r\n          attach=\"geometry\"\r\n          roughness={0.5}\r\n          transparency={0.9}\r\n        />\r\n        <meshBasicMaterial color={0x39ff14} attach=\"material\" />\r\n      </mesh>\r\n\r\n      <mesh\r\n        ref={meshRef}\r\n        position={position}\r\n        // onClick={(e) => onClick(e)}\r\n\r\n        //onPointerOver={e => onHover(e, true)}\r\n        //onPointerOut={e => onHover(e, false)}\r\n      >\r\n        {/* Below in args, the first argument is the size of the spheres\r\nthe second argument is  */}\r\n        <sphereBufferGeometry\r\n          attach=\"geometry\"\r\n          args={[1, 6.3, 6.3, 6, 6.3, 6.3, 6.3]}\r\n        />\r\n        {/* ,6,{philen},{thesta},{thelen} */}\r\n\r\n        <meshStandardMaterial\r\n          attach=\"material\"\r\n          color={0x39ff14}\r\n          roughness={0.5}\r\n          metalness={0.5}\r\n          ref={diamondRef}\r\n        />\r\n      </mesh>\r\n    </group>,\r\n  ];\r\n};\r\nexport default Animations;\r\n"]},"metadata":{},"sourceType":"module"}